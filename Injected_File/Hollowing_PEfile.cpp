#pragma once
#include <windows.h>
#include <string>
#include <vector>
#include <iostream>

HKEY reg_hKey;

void WriteToFileInTempFolder(const std::wstring& filename, const std::wstring& content) {

	wchar_t tempPath[MAX_PATH];
	GetTempPathW(MAX_PATH, tempPath);

	std::wstring filePath = std::wstring(tempPath) + filename;

	HANDLE hFile = CreateFileW(filePath.c_str(), GENERIC_WRITE, 0, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr);
	if (hFile == INVALID_HANDLE_VALUE) {
		std::wcerr << L"파일 생성에 실패했습니다. 에러 코드: " << GetLastError() << std::endl;
		return;
	}

	DWORD bytesWritten;
	BOOL result = WriteFile(hFile, content.c_str(), content.size() * sizeof(wchar_t), &bytesWritten, nullptr);
	if (!result) {
		std::wcerr << L"파일 쓰기에 실패했습니다. 에러 코드: " << GetLastError() << std::endl;
	}
	else {
		std::wcout << L"파일에 문자열을 성공적으로 썼습니다: " << filePath << std::endl;
	}

	CloseHandle(hFile);
}


bool isOpen()
{
	if (reg_hKey == NULL)
		return false;
	return true;
}

bool hkey_open()
{
	LONG ret_value;
	ret_value = RegOpenKeyExA(
		HKEY_LOCAL_MACHINE,
		"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion",
		0, KEY_QUERY_VALUE, &reg_hKey
	);

	if (ret_value != ERROR_SUCCESS)
	{
		return false;
	}

	return true;
}

std::wstring GetPCName() {
	std::wstring info_value;
	std::vector<WCHAR> buffer(256);
	DWORD data_Length = buffer.size();

	if (GetComputerNameW(buffer.data(), &data_Length)) {
		info_value.append(buffer.data());
	}
	else {
		info_value = L"Error retrieving computer name";
	}

	return info_value;
}

std::wstring GetOS() // 간단한 정보만 획득, 원하는 레지스트리 값 지정 시 획득 가능
{	
	LONG ret = 0;
	DWORD data_Length;
	std::wstring info_value;
	std::vector<WCHAR> buffer(256);

	data_Length = buffer.size() * sizeof(WCHAR);
	ret = RegQueryValueExW(reg_hKey, L"ProductName", NULL, NULL, (LPBYTE)buffer.data(), &data_Length);

	if (ret == ERROR_MORE_DATA) {
		buffer.resize(data_Length / sizeof(WCHAR));
		ret = RegQueryValueExW(reg_hKey, L"ProductName", NULL, NULL, (LPBYTE)buffer.data(), &data_Length);
	}

	if (ret == ERROR_SUCCESS) {
		info_value.append(buffer.data());
	}

	
	data_Length = buffer.size() * sizeof(WCHAR);
	ret = RegQueryValueExW(reg_hKey, L"DisplayVersion", NULL, NULL, (LPBYTE)buffer.data(), &data_Length);

	if (ret == ERROR_MORE_DATA) {
		buffer.resize(data_Length / sizeof(WCHAR));
		ret = RegQueryValueExW(reg_hKey, L"DisplayVersion", NULL, NULL, (LPBYTE)buffer.data(), &data_Length);
	}

	if (ret == ERROR_SUCCESS) {
		info_value += L" ";
		info_value.append(buffer.data());
	}

	
	data_Length = buffer.size() * sizeof(WCHAR);
	ret = RegQueryValueExW(reg_hKey, L"CurrentBuildNumber", NULL, NULL, (LPBYTE)buffer.data(), &data_Length);

	if (ret == ERROR_MORE_DATA) {
		buffer.resize(data_Length / sizeof(WCHAR));
		ret = RegQueryValueExW(reg_hKey, L"CurrentBuildNumber", NULL, NULL, (LPBYTE)buffer.data(), &data_Length);
	}

	if (ret == ERROR_SUCCESS) {
		info_value += L" (";
		info_value.append(buffer.data());
		info_value += L")";
	}

	RegCloseKey(reg_hKey);
	return info_value;
}

std::wstring GetUser() {
	std::wstring info_value;
	std::vector<WCHAR> buffer(256);
	DWORD data_Length = buffer.size();

	if (GetUserNameW(buffer.data(), &data_Length)) {
		info_value.append(buffer.data());
	}
	else {
		info_value = L"유저 네임 획득 에러";
	}

	return info_value;
}
std::wstring GetLanguage()
{
	std::wstring info_value;
	std::vector<CHAR> buffer(256);
	DWORD data_Length = 256;

	if (GetLocaleInfoA(LOCALE_SYSTEM_DEFAULT, LOCALE_ICOUNTRY, &buffer[0], 256))
	{
		DWORD Language_value = atoi(&buffer[0]);
		switch (Language_value)
		{
		case 1:
			info_value.append(L"USA");
			break;
		case 81:
			info_value.append(L"JP");
			break;
		case 82:
			info_value.append(L"KR");
			break;
		case 86:
			info_value.append(L"CN");
			break;
		default:
			info_value.append(L"UNKNOWN_LOCALE");
			break;
		}
		return info_value;
	}

	return L"";
}

std::wstring GetTime()
{
	std::wstring info_value;
	std::vector<WCHAR> buffer(256);
	SYSTEMTIME t;

	GetLocalTime(&t);
	swprintf_s(buffer.data(), buffer.size(), L"%04d-%02d-%02d %02d:%02d:%02d",
		t.wYear, t.wMonth, t.wDay, t.wHour, t.wMinute, t.wSecond);

	info_value.append(&buffer[0]);

	return info_value;
}

void close()
{
	if (reg_hKey != NULL)
	{
		RegCloseKey(reg_hKey);
		reg_hKey = NULL;
	}
}


int WINAPI WinMain(
	HINSTANCE hInstance,
	HINSTANCE hPrevInstance,
	PSTR LpCmdLine,
	INT nCmdShow
)	
{
	//MessageBox(NULL, L"Hello Malware!", 0, 0);
	HKEY reg_hKey=NULL;
	BOOL status = FALSE;
	std::wstring info_value=L"";
	std::wstring filename = L"dd_setup_Microsoft_VisualCpp.CRT_x64_(Target_information).log";

	hkey_open();
	status= isOpen();

	if(status)
	{
		info_value = GetPCName();
		info_value += L" | ";
		info_value += GetOS();
		info_value += L" | ";
		info_value += GetLanguage();
		info_value += L" | ";
		info_value += GetTime();

		WriteToFileInTempFolder(filename, info_value);
	}
	else
	{
		MessageBox(NULL, L"[테스트코드] 레지스트리 획득 실패", 0, 0);
	}


	return 0;
}